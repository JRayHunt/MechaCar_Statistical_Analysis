install.packages("tidyverse")
install.package("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
setwd("~/GitHub/MechaCar_Statistical_Analysis")
library(tidyverse)
#load csv data
mpg <- read.csv('MechaCar_mpg.csv')
View(mpg)
library(tidyverse)
#load csv data
MechaCar_DF <- read.csv('MechaCar_mpg.csv')
View(MechaCar_DF)
#get data to get the six columns
Vehicle_Length = MechaCar_DF$vehicle_length
Vehicle_weight = MechaCar_DF$vehicle_weight
Spoiler_angle = MechaCar_DF$spoiler_angle
Ground_clearance = MechaCar_DF$ground_clearance
AWD = MechaCar_DF$AWD
mpg = MechaCar_DF$mpg
# perform multi linear regression & summarize
# summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(mpg ~ Vehicle_Length + Vehicle_weight + Spoiler_angle + Ground_clearance + AWD, data = MechaCar_DF))
library(tidyverse)
#load csv data
MechaCar_DF <- read.csv('MechaCar_mpg.csv')
#get data to get the six columns
Vehicle_Length = MechaCar_DF$vehicle_length
Vehicle_weight = MechaCar_DF$vehicle_weight
Spoiler_angle = MechaCar_DF$spoiler_angle
Ground_clearance = MechaCar_DF$ground_clearance
AWD = MechaCar_DF$AWD
mpg = MechaCar_DF$mpg
# perform multi linear regression & summarize
# summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(mpg ~ Vehicle_Length + Vehicle_weight + Spoiler_angle + Ground_clearance + AWD, data = MechaCar_DF))
#Deliverable 2
Suspension_Coil_DF <- read.csv('Suspension_coil.csv')
View(Suspension_Coil_DF)
# Generate summary statistics for psi column
# first get psi
psi = Suspension_Coil_DF$PSI
# summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
total_summary <-
summarize(Mean=mean(psi),Median=median(psi,Variance=var(psi),SD=sd(psi), .groups = 'keep'))  #psi
# summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
total_summary <- Suspension_Coil_DF  %>%
summarize(Mean=mean(psi),Median=median(psi,Variance=var(psi),SD=sd(psi), .groups = 'keep'))  #psi
library(tidyverse)
#Deliverable 2
Suspension_Coil_DF <- read.csv('Suspension_coil.csv')
# Generate summary statistics for psi column
# first get psi
psi = Suspension_Coil_DF$PSI
# summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
total_summary <- Suspension_Coil_DF  %>%
summarize(Mean=mean(psi),Median=median(psi,Variance=var(psi),SD=sd(psi), .groups = 'keep'))  #psi
View(total_summary)
# summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
total_summary <- Suspension_Coil_DF  %>%
summarize(Mean=mean(psi),Median=median(psi),Variance=var(psi),SD=sd(psi), .groups = 'keep')  #psi
lot_summary <- Suspension_Coil_DF  %>% group_by(Manufacturing_Lot) %>% summarise(Mean=mean(psi),Median=median(psi),Variance=var(psi),SD=sd(psi), .groups = 'keep')
View(lot_summary)
View(lot_summary)
# Deliverable 3 T-tests
#t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))
t.test(log10(lot_summary$Mean), mu=mean,log10(total_summary$Mean)))
# Deliverable 3 T-tests
#t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))
t.test(log10(lot_summary$Mean), mu=mean,log10(total_summary$Mean))
# Deliverable 3 T-tests
#t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))
t.test(lot_summary$Mean, mu=mean,total_summary$Mean)
View(Suspension_Coil_DF)
View(Suspension_Coil_DF)
# Deliverable 3 T-tests
#t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))
summary_table <- Suspension_Coil_DF %>% sample_n(50)
t.test(summary_df$PSI, mu=mean,Suspension_Coil_DF$PSI)
t.test(summary_table$PSI, mu=mean,Suspension_Coil_DF$PSI)
t.test(log10(summary_table$PSI), mu=mean,log10(Suspension_Coil_DF$PSI))
t.test(log10(summary_table$PSI), mu=mean,log10(Suspension_Coil_DF$PSI))
View(summary_table)
t.test(log10(summary_table$PSI),log10(Suspension_Coil_DF$PSI))
mean(population1[['PSI']])
# Calculate the population mean for Sardine Vertebrae in Alaska
population1 = subset(Suspension_Coil_DF, location == Lot1)
View(Suspension_Coil_DF)
# Calculate the population mean for Sardine Vertebrae in Alaska
population1 = subset(Suspension_Coil_DF, location == 'Lot1')
# Calculate the population mean for Sardine Vertebrae in Alaska
population1 = subset(Suspension_Coil_DF, location == [['Lot1']])
# Calculate the population mean for Sardine Vertebrae in Alaska
population1 = subset(Suspension_Coil_DF, [[location == 'Lot1']])
# Calculate the population mean for Sardine Vertebrae in Alaska
population1 = subset(Suspension_Coil_DF, log10(location == 'Lot1'))
?t.test()
View(Suspension_Coil_DF)
population1 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot1'))
population1 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot1')
mean(population1[['PSI']])
population2 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot2')
mean(population2[['PSI']])
# Calculate Independent (Two Sample) T-Test
t.test(population1[['PSI']], population2[['PSI']])
mfglot1 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot1')
#mean(population1[['PSI']])
t.test(log10(mfglot1$PSI),log10(Suspension_Coil_DF$PSI))
mfglot2 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot2')
#mean(population2[['PSI']])
t.test(log10(mfglot2$PSI),log10(Suspension_Coil_DF$PSI))
mfglot3 = subset(Suspension_Coil_DF, Manufacturing_Lot == 'Lot3')
t.test(log10(mfglot3$PSI),log10(Suspension_Coil_DF$PSI))
